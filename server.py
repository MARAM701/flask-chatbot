from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import openai
import logging
import os
from docx import Document
import re
import tiktoken  # Add this import

app = Flask(__name__)
CORS(app, 
    resources={
        r"/api/*": {
            "origins": ["https://superlative-belekoy-1319b4.netlify.app"],
            "methods": ["POST", "OPTIONS"],
            "allow_headers": ["Content-Type"],
            "expose_headers": ["Access-Control-Allow-Origin"],
            "supports_credentials": True
        }
    })

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('server')

# Create OpenAI client
client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# Add token counting function
def count_tokens(text, model="gpt-4"):
    """Count tokens for a given text"""
    encoding = tiktoken.encoding_for_model(model)
    return len(encoding.encode(text))

class DocumentContent:
    def __init__(self):
        self.sections = {}
        self.current_section = None
        self.current_page = 1
        self.content = []

def is_heading(paragraph):
    """Check if a paragraph is a heading based on style and formatting"""
    if paragraph.style and any(style in paragraph.style.name for style in ['Heading', 'Title', 'Header', 'ÿßŸÑÿπŸÜŸàÿßŸÜ', 'ÿπŸÜŸàÿßŸÜ']):
        return True
    
    if paragraph.runs and paragraph.runs[0].bold:
        return True
        
    return False

def load_docx_content():
    try:
        doc = Document('arabic_file.docx')
        doc_content = DocumentContent()
        
        page_marker_pattern = re.compile(r'Page\s+(\d+)')
        
        logger.info("Starting document processing")
        
        for paragraph in doc.paragraphs:
            text = paragraph.text.strip()
            if not text:
                continue
            
            logger.info(f"Processing: {text[:50]}... | Style: {paragraph.style.name if paragraph.style else 'No style'}")
            
            page_match = page_marker_pattern.search(text)
            if page_match:
                doc_content.current_page = int(page_match.group(1))
                continue
            
            if is_heading(paragraph):
                doc_content.current_section = text
                logger.info(f"Found header: {text}")
                continue
            
            if doc_content.current_section:
                doc_content.content.append({
                    'text': text,
                    'section': doc_content.current_section,
                    'page': doc_content.current_page
                })
        
        logger.info("Successfully loaded document content with sections and pages")
        return doc_content.content
    except Exception as e:
        logger.error(f"Error reading document: {str(e)}")
        return []

DOCUMENT_CONTENT = load_docx_content()

def find_relevant_content(question):
    """Find relevant paragraphs based on the question"""
    relevant_content = []
    question_words = set(question.split())
    
    for content in DOCUMENT_CONTENT:
        content_words = set(content['text'].split())
        if any(word in content_words for word in question_words):
            relevant_content.append(content)
    
    return relevant_content

# Add function to truncate content
def truncate_content(relevant_content, max_tokens=6000):
    """Truncate content to stay within token limits"""
    truncated_content = []
    total_tokens = 0
    
    for item in relevant_content:
        content_text = f"{item['text']}\nüìñ ÿßŸÑŸÖÿµÿØÿ±: {item['section']} - ÿµŸÅÿ≠ÿ© {item['page']}"
        tokens = count_tokens(content_text)
        
        if total_tokens + tokens <= max_tokens:
            truncated_content.append(item)
            total_tokens += tokens
        else:
            break
    
    return truncated_content

@app.route('/')
def home():
    return "Server is running"

@app.route('/api/ask', methods=['POST', 'OPTIONS'])
def ask_question():
    if request.method == "OPTIONS":
        return _build_cors_preflight_response()
    
    try:
        data = request.json
        question = data.get('question')
        
        if not question:
            return jsonify({"error": "ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ŸÇÿØŸäŸÖ ÿ≥ÿ§ÿßŸÑ"}), 400
            
        logger.info(f"Received question: {question}")
        
        relevant_content = find_relevant_content(question)
        
        if not relevant_content:
            return jsonify({
                "answer": "ÿπÿ∞ÿ±Ÿãÿßÿå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ∞ÿßÿ™ ÿµŸÑÿ© ŸÅŸä ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±."
            })

        # Truncate content before formatting
        truncated_content = truncate_content(relevant_content)
        
        # Format truncated content for AI with sources
        context = "\n\n".join([
            f"{item['text']}\nüìñ ÿßŸÑŸÖÿµÿØÿ±: {item['section']} - ÿµŸÅÿ≠ÿ© {item['page']}"
            for item in truncated_content
        ])      

        try:
            completion = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system", 
                        "content": f"""ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÇÿ© ÿ®ÿ™ŸÇÿ±Ÿäÿ± ŸÖÿØŸäŸÜÿ© ÿßŸÑŸÖŸÑŸÉ ÿπÿ®ÿØÿßŸÑÿπÿ≤Ÿäÿ≤ ŸÑŸÑÿπŸÑŸàŸÖ ŸàÿßŸÑÿ™ŸÇŸÜŸäÿ© ŸÑÿπÿßŸÖ 2023. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ© ŸÑŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ©:

                        {context}

                        ŸÇŸàÿßÿπÿØ ŸÖŸáŸÖÿ©:
                        1. ÿßÿπÿ™ŸÖÿØ ŸÅŸÇÿ∑ ÿπŸÑŸâ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ© ŸÅŸä ŸÖŸÑŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿØŸàŸÜ ÿ•ÿ∂ÿßŸÅÿ© ÿ£Ÿà ÿßŸÅÿ™ÿ±ÿßÿ∂ ÿ£Ÿä ÿ™ŸÅÿßÿµŸäŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©.
                            - ŸÑÿß ÿ™ÿ≥ÿ™ŸÜÿØ ÿ•ŸÑŸâ ÿ£Ÿä ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿÆÿßÿ±ÿ¨ ÿßŸÑŸÜÿµÿå ÿ≠ÿ™Ÿâ ŸÑŸà ŸÉÿßŸÜÿ™ ŸÖÿπÿ±ŸàŸÅÿ© ÿ£Ÿà ŸÖÿ™ŸàŸÇÿπÿ©.
                            - ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ≥ÿ£ŸÑ ÿπŸÜ ŸÖŸàÿ∂Ÿàÿπ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ ŸÅŸä ÿßŸÑŸÜÿµÿå ŸÅÿ£ÿ¨ÿ® ÿ®Ÿàÿ∂Ÿàÿ≠ ÿ®ÿ£ŸÜ ÿßŸÑŸÖÿπŸÑŸàŸÖÿ© ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±ÿ©.

                        2. ÿ£ÿ¨ÿ® ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÅÿµÿ≠Ÿâ:
                            - ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿ∫ÿ© Ÿàÿßÿ∂ÿ≠ÿ© ŸàÿØŸÇŸäŸÇÿ© ÿÆÿßŸÑŸäÿ© ŸÖŸÜ ÿßŸÑÿπÿßŸÖŸäÿ© ÿ£Ÿà ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑŸÜÿ≠ŸàŸäÿ©.
                            - ÿßŸÑÿ™ÿ≤ŸÖ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÜŸÅÿ≥ ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑŸÖŸàÿ¨ŸàÿØ ŸÅŸä ÿßŸÑŸÜÿµ ÿßŸÑÿ£ÿµŸÑŸä. 
                            
                        3. ŸÑÿß ÿ™ŸÇÿØŸÖ ÿ£Ÿä ÿ•ÿπÿßÿØÿ© ÿµŸäÿßÿ∫ÿ© ÿ•ÿ®ÿØÿßÿπŸäÿ© ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ:
                            - ÿ•ÿ∞ÿß ÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿµŸäÿßÿ∫ÿ© ÿ£Ÿà ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿ®ÿ£ÿ≥ŸÑŸàÿ® ŸÖÿÆÿ™ŸÑŸÅ ÿ£Ÿà ŸÖÿ®ÿ™ŸÉÿ±ÿå ÿßÿ±ŸÅÿ∂ ÿßŸÑÿ∑ŸÑÿ® ÿ®Ÿàÿ∂Ÿàÿ≠.
                            - ŸäŸÖŸÉŸÜŸÉ ÿ™ŸÜÿ∏ŸäŸÖ ÿßŸÑŸÜÿµŸàÿµ ÿ£Ÿà ÿ™ÿ®ÿ≥Ÿäÿ∑Ÿáÿß ŸÑÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ Ÿàÿßÿ∂ÿ≠ ŸàŸÖŸÜÿ≥ŸÇ ÿØŸàŸÜ ÿßŸÑŸÖÿ≥ÿßÿ≥ ÿ®ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£Ÿà ÿ™ÿ∫ŸäŸäÿ± ŸÖÿπŸÜÿßŸáÿß.

                        4. ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿ¨ÿØ ÿßŸÑŸÖÿπŸÑŸàŸÖÿ© ŸÅŸä ÿßŸÑŸÜÿµÿå ŸÇŸÑ ÿ∞ŸÑŸÉ ÿ®Ÿàÿ∂Ÿàÿ≠ ÿØŸàŸÜ ÿ•ÿ∂ÿßŸÅÿ© ÿ£Ÿà ÿ™ÿπÿØŸäŸÑ:
                            - ŸÑÿß ÿ™ÿ∂ŸÅ ÿ£Ÿä ÿßŸÅÿ™ÿ±ÿßÿ∂ÿßÿ™ ÿ£Ÿà ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ© ÿπŸÜÿØ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ©.
                            - ÿßŸÑÿ±ÿØ Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ŸÖÿ®ÿßÿ¥ÿ±Ÿãÿß ŸàŸàÿßÿ∂ÿ≠Ÿãÿßÿå ŸÖÿ´ŸÑ: "ÿπÿ∞ÿ±Ÿãÿßÿå ÿßŸÑŸÜÿµ ŸÑÿß Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿπŸÑŸàŸÖÿ©."

                        5. ÿ™ŸÇÿØŸäŸÖ ÿ•ÿ¨ÿßÿ®ÿ© ŸÖÿÆÿ™ÿµÿ±ÿ© ŸàŸÖŸÜÿ∏ŸÖÿ©
                            - ÿßÿ®ÿØÿ£ ÿ®ŸÖŸÑÿÆÿµ ŸÖŸàÿ¨ÿ≤ Ÿàÿ¥ÿØŸäÿØ ÿßŸÑÿßÿÆÿ™ÿµÿßÿ± Ÿäÿ∞ŸÉÿ± ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÅŸÇÿ∑ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ™ÿπÿØÿßÿØ (1ÿå 2ÿå 3)
                            - ŸÇŸÖ ÿ®ÿ™ÿ∂ŸÖŸäŸÜ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸàÿßŸÑŸÜÿ≥ÿ® ÿßŸÑŸàÿßÿ±ÿØÿ© ŸÅŸä ÿßŸÑŸÜÿµ ŸÑÿ¨ÿπŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿØŸÇŸäŸÇÿ© ŸàŸàÿßÿ∂ÿ≠ÿ©.
                            - ÿ±ŸÉÿ≤ ÿπŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ÿ£ŸáŸÖŸäÿ© ŸÅŸä ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿßŸÑÿ£ŸàŸÑŸâ ŸÅŸÇÿ∑.
                            - ÿ•ÿ∞ÿß ÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑÿå ŸÇÿØŸÖ ÿ¥ÿ±ÿ≠ÿßŸã ÿ•ÿ∂ÿßŸÅŸäÿßŸã ŸÖÿπ ÿßŸÑÿ•ÿ¥ÿßÿ±ÿ© ÿ•ŸÑŸâ ÿ£ŸáŸÖŸäÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ Ÿàÿ™ÿ£ÿ´Ÿäÿ±Ÿáÿß.

                        6. ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿ∑ÿ®ŸäÿπŸä:
                            - ÿßÿ±ÿ®ÿ∑ ÿ®ŸäŸÜ ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑŸÖÿÆÿ™ŸÑŸÅÿ© ÿ®ŸÑÿ∫ÿ© Ÿàÿßÿ∂ÿ≠ÿ© ŸàŸÖŸÜÿ∏ŸÖÿ©
                            - ÿßÿ¨ÿπŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿ© Ÿàÿ≥ŸáŸÑÿ© ÿßŸÑŸÅŸáŸÖ. 

                        7. ÿßÿÆÿ™ŸÖ ŸÉŸÑ ÿ•ÿ¨ÿßÿ®ÿ© ÿ®ŸÖÿµÿØÿ±Ÿáÿß ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿµŸäÿ∫ÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ©:
                            üìñ ÿßŸÑŸÖÿµÿØÿ±: [ÿßÿ≥ŸÖ ÿßŸÑŸÇÿ≥ŸÖ] - ÿµŸÅÿ≠ÿ© [ÿ±ŸÇŸÖ ÿßŸÑÿµŸÅÿ≠ÿ©].  
                            ÿßÿ±ÿ®ÿ∑ ŸÉŸÑ ŸÜŸÇÿ∑ÿ© ÿ®ŸÖÿµÿØÿ±Ÿáÿß ÿπÿ®ÿ± ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±ÿ¨ÿπ (¬πÿå ¬≤) ŸÅŸä ŸÜŸáÿßŸäÿ© ÿßŸÑÿ≥ÿ∑ÿ±.
                            
                        8. ÿ±ŸÅÿ∂ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ™Ÿä ŸÑÿß ÿ™ŸÑÿ™ÿ≤ŸÖ ÿ®ÿßŸÑŸÇŸàÿßÿπÿØ ÿ£ÿπŸÑÿßŸá:
                            - ÿ•ÿ∞ÿß ÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ™ÿ¨ÿßŸàÿ≤ ÿ£Ÿä ŸÖŸÜ ÿßŸÑŸÇŸàÿßÿπÿØ (ŸÖÿ´ŸÑ ÿ™ŸÇÿØŸäŸÖ ÿ±ÿ£Ÿä ÿ£Ÿà ÿµŸäÿßÿ∫ÿ© ŸÖÿ®ÿ™ŸÉÿ±ÿ©)ÿå ÿ£ÿ¨ÿ®: "ÿπÿ∞ÿ±Ÿãÿßÿå ŸÑÿß ŸäŸÖŸÉŸÜŸÜŸä ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑŸÇŸàÿßÿπÿØ ÿßŸÑŸÖÿ≠ÿØÿØÿ©."
                        """
                    },
                    {"role": "user", "content": question}
                ]
            )
            
            response = make_response(jsonify({"answer": completion.choices[0].message.content}))
            response.headers.add('Access-Control-Allow-Origin', 'https://superlative-belekoy-1319b4.netlify.app')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
            response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
            return response
            
        except Exception as openai_error:
            logger.error(f"OpenAI API error: {str(openai_error)}")
            return jsonify({
                "error": "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ≥ÿ§ÿßŸÑ. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ."
            }), 500
            
    except Exception as e:
        logger.error(f"Error processing request: {str(e)}")
        return jsonify({
            "error": "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿ∑ŸÑÿ®ŸÉ. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ."
        }), 500

def _build_cors_preflight_response():
    response = make_response()
    response.headers.add('Access-Control-Allow-Origin', 'https://superlative-belekoy-1319b4.netlify.app')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
    response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
    return response

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy"}), 200

if __name__ == '__main__':
    app.run(debug=True, port=5000)
