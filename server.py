from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import openai
import logging
import os

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('server')

app = Flask(__name__)
CORS(app, 
    resources={
        r"/api/*": {
            "origins": ["https://superlative-belekoy-1319b4.netlify.app"],
            "methods": ["POST", "OPTIONS"],
            "allow_headers": ["Content-Type"],
            "expose_headers": ["Access-Control-Allow-Origin"],
            "supports_credentials": True
        }
    })

# Initialize OpenAI client with API key
client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# File ID for the uploaded document
FILE_ID = "file-49QLKcNUKVux98EDPQ4wQc"

@app.route('/')
def home():
    return jsonify({
        "status": "Server is running",
        "file_id": FILE_ID
    })

@app.route('/api/ask', methods=['POST', 'OPTIONS'])
def ask_question():
    if request.method == "OPTIONS":
        return _build_cors_preflight_response()
    
    try:
        data = request.json
        question = data.get('question')
        
        if not question:
            return jsonify({"error": "ูู ูุชู ุชูุฏูู ุณุคุงู"}), 400
            
        logger.info(f"Received question: {question}")
        
        try:
            completion = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": """ุฃูุช ูุณุงุนุฏ ุฐูู ูุชุฎุตุต ูู ุงูุฅุฌุงุจุฉ ุนูู ุงูุฃุณุฆูุฉ ุงููุชุนููุฉ ุจุชูุฑูุฑ ูุฏููุฉ ุงูููู ุนุจุฏุงูุนุฒูุฒ ููุนููู ูุงูุชูููุฉ.

                        ููุงุนุฏ ูููุฉ:
                        1. ุงุนุชูุฏ ููุท ุนูู ุงููุนูููุงุช ุงูููุฌูุฏุฉ ูู ููู ุงูุชูุฑูุฑ ุฏูู ุฅุถุงูุฉ ุฃู ุงูุชุฑุงุถ ุฃู ุชูุงุตูู ุบูุฑ ููุฌูุฏุฉ.
                            - ูุง ุชุณุชูุฏ ุฅูู ุฃู ูุนูููุงุช ุฎุงุฑุฌ ุงููุตุ ุญุชู ูู ูุงูุช ูุนุฑููุฉ ุฃู ูุชููุนุฉ.
                            - ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุณุฃู ุนู ููุถูุน ุบูุฑ ููุฌูุฏ ูู ุงููุตุ ูุฃุฌุจ ุจูุถูุญ ุจุฃู ุงููุนูููุฉ ุบูุฑ ูุชููุฑุฉ.

                        2. ุฃุฌุจ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู:
                            - ุงุณุชุฎุฏู ูุบุฉ ูุงุถุญุฉ ูุฏูููุฉ ุฎุงููุฉ ูู ุงูุนุงููุฉ ุฃู ุงูุฃุฎุทุงุก ุงููุญููุฉ.
                            - ุงูุชุฒู ุจุงุณุชุฎุฏุงู ููุณ ูุณุชูู ุงููุบุฉ ุงูููุฌูุฏ ูู ุงููุต ุงูุฃุตูู. 
                            
                        3. ูุง ุชูุฏู ุฃู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุฅุจุฏุงุนูุฉ ุจูุงุกู ุนูู ุทูุจ ุงููุณุชุฎุฏู:
                            - ุฅุฐุง ุทูุจ ุงููุณุชุฎุฏู ุฅุนุงุฏุฉ ุงูุตูุงุบุฉ ุฃู ูุชุงุจุฉ ุงูุฅุฌุงุจุฉ ุจุฃุณููุจ ูุฎุชูู ุฃู ูุจุชูุฑุ ุงุฑูุถ ุงูุทูุจ ุจูุถูุญ.
                            - ููููู ุชูุธูู ุงููุตูุต ุฃู ุชุจุณูุทูุง ูุชูุฏูู ุงูุฅุฌุงุจุฉ ุจุดูู ูุงุถุญ ูููุณู ุฏูู ุงููุณุงุณ ุจุงููุนูููุงุช ุฃู ุชุบููุฑ ูุนูุงูุง.

                        4. ุฅุฐุง ูู ุชุฌุฏ ุงููุนูููุฉ ูู ุงููุตุ ูู ุฐูู ุจูุถูุญ ุฏูู ุฅุถุงูุฉ ุฃู ุชุนุฏูู:
                            - ูุง ุชุถู ุฃู ุงูุชุฑุงุถุงุช ุฃู ูุนูููุงุช ุฅุถุงููุฉ ุนูุฏ ุงูุฅุฌุงุจุฉ.
                            - ุงูุฑุฏ ูุฌุจ ุฃู ูููู ูุจุงุดุฑูุง ููุงุถุญูุงุ ูุซู: "ุนุฐุฑูุงุ ุงููุต ูุง ูุญุชูู ุนูู ูุฐู ุงููุนูููุฉ."

                        5. ุชูุฏูู ุฅุฌุงุจุฉ ูุฎุชุตุฑุฉ ูููุธูุฉ
                            - ุงุจุฏุฃ ุจููุฎุต ููุฌุฒ ูุดุฏูุฏ ุงูุงุฎุชุตุงุฑ ูุฐูุฑ ุงูููุงุท ุงูุฑุฆูุณูุฉ ููุท ุจุงุณุชุฎุฏุงู ุงูุชุนุฏุงุฏ (1ุ 2ุ 3)
                            - ูู ุจุชุถููู ุงูุฃุฑูุงู ูุงููุณุจ ุงููุงุฑุฏุฉ ูู ุงููุต ูุฌุนู ุงูุฅุฌุงุจุฉ ุฏูููุฉ ููุงุถุญุฉ.
                            - ุฑูุฒ ุนูู ุงูุจูุงูุงุช ุงูุฃูุซุฑ ุฃูููุฉ ูู ุงูุฅุฌุงุจุฉ ุงูุฃููู ููุท.
                            - ุฅุฐุง ุทูุจ ุงููุณุชุฎุฏู ุงููุฒูุฏ ูู ุงูุชูุงุตููุ ูุฏู ุดุฑุญุงู ุฅุถุงููุงู ูุน ุงูุฅุดุงุฑุฉ ุฅูู ุฃูููุฉ ุงูุจูุงูุงุช ูุชุฃุซูุฑูุง.

                        6. ุชุฑุชูุจ ุงูุฅุฌุงุจุฉ ุจุดูู ุทุจูุนู:
                            - ุงุฑุจุท ุจูู ุงูููุงุท ุงููุฎุชููุฉ ุจูุบุฉ ูุงุถุญุฉ ูููุธูุฉ
                            - ุงุฌุนู ุงูุฅุฌุงุจุฉ ูุชุฑุงุจุทุฉ ูุณููุฉ ุงูููู. 

                        7. ุงุฎุชู ูู ุฅุฌุงุจุฉ ุจูุตุฏุฑูุง ุจุงุณุชุฎุฏุงู ุงูุตูุบุฉ ุงูุชุงููุฉ:
                            ๐ ุงููุตุฏุฑ: [ุงุณู ุงููุณู] - ุตูุญุฉ [ุฑูู ุงูุตูุญุฉ].  
                            ุงุฑุจุท ูู ููุทุฉ ุจูุตุฏุฑูุง ุนุจุฑ ุฑูู ุงููุฑุฌุน (ยนุ ยฒ) ูู ููุงูุฉ ุงูุณุทุฑ.
                            
                        8. ุฑูุถ ุงูุทูุจุงุช ุงูุชู ูุง ุชูุชุฒู ุจุงูููุงุนุฏ ุฃุนูุงู:
                            - ุฅุฐุง ุทูุจ ุงููุณุชุฎุฏู ุชุฌุงูุฒ ุฃู ูู ุงูููุงุนุฏ (ูุซู ุชูุฏูู ุฑุฃู ุฃู ุตูุงุบุฉ ูุจุชูุฑุฉ)ุ ุฃุฌุจ: "ุนุฐุฑูุงุ ูุง ูููููู ุงูููุงู ุจุฐูู ุจูุงุกู ุนูู ุงูููุงุนุฏ ุงููุญุฏุฏุฉ."""
                    },
                    {"role": "user", "content": question}
                ],
                file_ids=[FILE_ID]
            )
            
            response = make_response(jsonify({
                "answer": completion.choices[0].message.content,
                "file_id": FILE_ID
            }))
            response.headers.add('Access-Control-Allow-Origin', 'https://superlative-belekoy-1319b4.netlify.app')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
            response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
            return response
            
        except openai.APIError as api_error:
            logger.error(f"OpenAI API error: {str(api_error)}", exc_info=True)
            error_message = "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ุงููุตูู ุฅูู ุงููุซููุฉ. ุงูุฑุฌุงุก ุงูุชุญูู ูู ุตูุงุญูุฉ ุงูููู."
            if "file not found" in str(api_error).lower():
                error_message = "ุนุฐุฑุงูุ ุงูููู ุงููุทููุจ ุบูุฑ ููุฌูุฏ. ุงูุฑุฌุงุก ุงูุชุญูู ูู ูุนุฑู ุงูููู."
            return jsonify({"error": error_message}), 500
            
        except Exception as openai_error:
            logger.error(f"OpenAI API error: {str(openai_error)}", exc_info=True)
            return jsonify({
                "error": "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุณุคุงู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู."
            }), 500
            
    except Exception as e:
        logger.error(f"Error processing request: {str(e)}", exc_info=True)
        return jsonify({
            "error": "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุทูุจู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู."
        }), 500

def _build_cors_preflight_response():
    response = make_response()
    response.headers.add('Access-Control-Allow-Origin', 'https://superlative-belekoy-1319b4.netlify.app')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
    response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
    return response

@app.route('/health', methods=['GET'])
def health_check():
    try:
        # Verify file exists by attempting to retrieve it
        client.files.retrieve(FILE_ID)
        file_status = True
    except:
        file_status = False
    
    return jsonify({
        "status": "healthy",
        "file_status": file_status,
        "file_id": FILE_ID
    }), 200

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
